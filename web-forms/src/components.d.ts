/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ButtonStandard {
        /**
          * value
         */
        "text": string;
    }
    interface CustomClock {
    }
    interface ElementSample {
        "open": boolean;
    }
    interface LoginField {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PasswordField {
        /**
          * value
         */
        "value": string;
    }
    interface TextField {
        /**
          * value
         */
        "value": string;
    }
}
export interface ButtonStandardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLButtonStandardElement;
}
export interface PasswordFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPasswordFieldElement;
}
export interface TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextFieldElement;
}
declare global {
    interface HTMLButtonStandardElement extends Components.ButtonStandard, HTMLStencilElement {
    }
    var HTMLButtonStandardElement: {
        prototype: HTMLButtonStandardElement;
        new (): HTMLButtonStandardElement;
    };
    interface HTMLCustomClockElement extends Components.CustomClock, HTMLStencilElement {
    }
    var HTMLCustomClockElement: {
        prototype: HTMLCustomClockElement;
        new (): HTMLCustomClockElement;
    };
    interface HTMLElementSampleElement extends Components.ElementSample, HTMLStencilElement {
    }
    var HTMLElementSampleElement: {
        prototype: HTMLElementSampleElement;
        new (): HTMLElementSampleElement;
    };
    interface HTMLLoginFieldElement extends Components.LoginField, HTMLStencilElement {
    }
    var HTMLLoginFieldElement: {
        prototype: HTMLLoginFieldElement;
        new (): HTMLLoginFieldElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPasswordFieldElement extends Components.PasswordField, HTMLStencilElement {
    }
    var HTMLPasswordFieldElement: {
        prototype: HTMLPasswordFieldElement;
        new (): HTMLPasswordFieldElement;
    };
    interface HTMLTextFieldElement extends Components.TextField, HTMLStencilElement {
    }
    var HTMLTextFieldElement: {
        prototype: HTMLTextFieldElement;
        new (): HTMLTextFieldElement;
    };
    interface HTMLElementTagNameMap {
        "button-standard": HTMLButtonStandardElement;
        "custom-clock": HTMLCustomClockElement;
        "element-sample": HTMLElementSampleElement;
        "login-field": HTMLLoginFieldElement;
        "my-component": HTMLMyComponentElement;
        "password-field": HTMLPasswordFieldElement;
        "text-field": HTMLTextFieldElement;
    }
}
declare namespace LocalJSX {
    interface ButtonStandard {
        /**
          * click
         */
        "onClick"?: (event: ButtonStandardCustomEvent<any>) => void;
        /**
          * value
         */
        "text"?: string;
    }
    interface CustomClock {
    }
    interface ElementSample {
        "open"?: boolean;
    }
    interface LoginField {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PasswordField {
        /**
          * onChange
         */
        "onInputChanging"?: (event: PasswordFieldCustomEvent<string>) => void;
        /**
          * value
         */
        "value"?: string;
    }
    interface TextField {
        /**
          * onChange
         */
        "onInputChanging"?: (event: TextFieldCustomEvent<string>) => void;
        /**
          * value
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "button-standard": ButtonStandard;
        "custom-clock": CustomClock;
        "element-sample": ElementSample;
        "login-field": LoginField;
        "my-component": MyComponent;
        "password-field": PasswordField;
        "text-field": TextField;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "button-standard": LocalJSX.ButtonStandard & JSXBase.HTMLAttributes<HTMLButtonStandardElement>;
            "custom-clock": LocalJSX.CustomClock & JSXBase.HTMLAttributes<HTMLCustomClockElement>;
            "element-sample": LocalJSX.ElementSample & JSXBase.HTMLAttributes<HTMLElementSampleElement>;
            "login-field": LocalJSX.LoginField & JSXBase.HTMLAttributes<HTMLLoginFieldElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "password-field": LocalJSX.PasswordField & JSXBase.HTMLAttributes<HTMLPasswordFieldElement>;
            "text-field": LocalJSX.TextField & JSXBase.HTMLAttributes<HTMLTextFieldElement>;
        }
    }
}
